<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0072)http://www.user.dccnet.com/wrigter/index_files/ZX%20Video%20Tutorial.htm -->
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Microsoft Theme 2.00" content="sumipntg 011">

<meta name="ProgId" content="Word.Document">
<meta name="Generator" content="Microsoft Word 9">
<meta name="Originator" content="Microsoft Word 9">
<link rel="File-List" href="http://www.user.dccnet.com/wrigter/index_files/ZX%20Video%20Tutorial_files/filelist.xml">
<link rel="Edit-Time-Data" href="http://www.user.dccnet.com/wrigter/index_files/ZX%20Video%20Tutorial_files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title> </title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>rigter</o:Author>
  <o:LastAuthor>rigter</o:LastAuthor>
  <o:Revision>18</o:Revision>
  <o:TotalTime>413</o:TotalTime>
  <o:Created>2005-04-08T05:00:00Z</o:Created>
  <o:LastSaved>2005-04-09T00:03:00Z</o:LastSaved>
  <o:Pages>19</o:Pages>
  <o:Words>7241</o:Words>
  <o:Characters>41277</o:Characters>
  <o:Company>rigter family</o:Company>
  <o:Lines>343</o:Lines>
  <o:Paragraphs>82</o:Paragraphs>
  <o:CharactersWithSpaces>50691</o:CharactersWithSpaces>
  <o:Version>9.6926</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Courier;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
h1
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:normal;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:24.0pt;
	font-family:Verdana;
	mso-bidi-font-family:Arial;
	color:#003366;
	mso-font-kerning:16.0pt;
	font-weight:normal;
	mso-bidi-font-weight:bold;}
h2
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:normal;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:18.0pt;
	font-family:Verdana;
	mso-bidi-font-family:Arial;
	color:#003366;
	font-weight:normal;
	mso-bidi-font-weight:bold;
	mso-bidi-font-style:italic;}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:normal;
	mso-pagination:widow-orphan;
	mso-outline-level:3;
	font-size:14.0pt;
	font-family:Verdana;
	mso-bidi-font-family:Arial;
	color:#003366;
	font-weight:normal;
	mso-bidi-font-weight:bold;}
h4
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:normal;
	mso-pagination:widow-orphan;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:Verdana;
	mso-bidi-font-family:"Times New Roman";
	color:#003366;
	font-weight:normal;
	mso-bidi-font-weight:bold;}
h5
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:normal;
	mso-pagination:widow-orphan;
	mso-outline-level:5;
	font-size:10.0pt;
	font-family:Verdana;
	mso-bidi-font-family:"Times New Roman";
	color:#003366;
	font-weight:normal;
	mso-bidi-font-weight:bold;
	mso-bidi-font-style:italic;}
h6
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:normal;
	mso-pagination:widow-orphan;
	mso-outline-level:6;
	font-size:8.0pt;
	font-family:Verdana;
	mso-bidi-font-family:"Times New Roman";
	color:#003366;
	font-weight:normal;
	mso-bidi-font-weight:bold;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:22.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:8;
	font-size:18.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;
	font-weight:bold;
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;
	text-decoration:underline;
	text-underline:single;}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:9;
	font-size:20.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;
	font-weight:bold;
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
p.MsoIndex1, li.MsoIndex1, div.MsoIndex1
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.5pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoIndex2, li.MsoIndex2, div.MsoIndex2
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.5pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoIndex3, li.MsoIndex3, div.MsoIndex3
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.5pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoIndex4, li.MsoIndex4, div.MsoIndex4
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:48.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.5pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoIndex5, li.MsoIndex5, div.MsoIndex5
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:60.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.5pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoIndex6, li.MsoIndex6, div.MsoIndex6
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:1.0in;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.5pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoIndex7, li.MsoIndex7, div.MsoIndex7
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:84.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.5pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoIndex8, li.MsoIndex8, div.MsoIndex8
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:96.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.5pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoIndex9, li.MsoIndex9, div.MsoIndex9
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:1.5in;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.5pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:48.0pt;
	margin-bottom:.0001pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:60.0pt;
	margin-bottom:.0001pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-right:0in;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:1.0in;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;
	font-weight:bold;
	mso-bidi-font-weight:normal;
	text-decoration:underline;
	text-underline:single;}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:84.0pt;
	margin-bottom:.0001pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoToc9, li.MsoToc9, div.MsoToc9
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:96.0pt;
	margin-bottom:.0001pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoIndexHeading, li.MsoIndexHeading, div.MsoIndexHeading
	{mso-style-next:"Index 1";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:7.0pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:16.5pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;
	font-weight:bold;}
p.MsoList2, li.MsoList2, div.MsoList2
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	text-indent:-.25in;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:16.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
p.MsoBodyTextIndent, li.MsoBodyTextIndent, div.MsoBodyTextIndent
	{margin-right:0in;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:.25in;
	line-height:normal;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#000066;}
a:link, span.MsoHyperlink
	{color:#3333CC;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:#666699;
	text-decoration:underline;
	text-underline:single;}
p
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:120%;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	color:black;}
pre
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:120%;
	mso-pagination:widow-orphan;
	tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";
	color:black;}
p.imgh, li.imgh, div.imgh
	{mso-style-name:imgh;
	margin-top:6.0pt;
	margin-right:3.0pt;
	margin-bottom:3.0pt;
	margin-left:3.0pt;
	line-height:120%;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.imgs, li.imgs, div.imgs
	{mso-style-name:imgs;
	margin-top:3.0pt;
	margin-right:4.5pt;
	margin-bottom:3.0pt;
	margin-left:4.5pt;
	line-height:120%;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.imgd, li.imgd, div.imgd
	{mso-style-name:imgd;
	margin:2.25pt;
	line-height:120%;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.center, li.center, div.center
	{mso-style-name:center;
	margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-align:center;
	line-height:120%;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.small, li.small, div.small
	{mso-style-name:small;
	margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:120%;
	mso-pagination:widow-orphan;
	font-size:9.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.b12, li.b12, div.b12
	{mso-style-name:b12;
	margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:120%;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.h1, li.h1, div.h1
	{mso-style-name:h1;
	margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:120%;
	mso-pagination:widow-orphan;
	font-size:21.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	color:black;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:94985034;
	mso-list-type:hybrid;
	mso-list-template-ids:-86845828 -621220704 1251242880 1685344156 1797038510 -154367420 -120535036 -351774600 1248245588 -1603094250;}
@list l1
	{mso-list-id:250820639;
	mso-list-type:hybrid;
	mso-list-template-ids:-2096694276 2007256922 -953384616 -1770906534 -167999090 2108613278 1612635426 -143259996 82206182 -1180015360;}
@list l2
	{mso-list-id:475680105;
	mso-list-type:hybrid;
	mso-list-template-ids:-276002846 -1859343266 267518916 -577890862 -1794112954 -1651202054 -1324420052 -929113920 -1223267074 -1070947210;}
@list l3
	{mso-list-id:615723255;
	mso-list-type:hybrid;
	mso-list-template-ids:1699520816 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l3:level1
	{mso-level-tab-stop:.75in;
	mso-level-number-position:left;
	margin-left:.75in;
	text-indent:-.25in;}
@list l4
	{mso-list-id:869494102;
	mso-list-type:hybrid;
	mso-list-template-ids:-1635242694 -1767216566 315781868 1706073328 186815554 1419295474 1607781782 -2023847082 -523762802 -601031370;}
@list l5
	{mso-list-id:2051764363;
	mso-list-type:hybrid;
	mso-list-template-ids:-2073631562 -1334905102 1512739568 -1781248332 -986388702 -1296656288 494464112 1282546490 -765144586 1962464354;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1032"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body bgcolor="white" background="./ZX%20Video%20Tutorial_files/image001.jpg" lang="EN-US" link="#3333cc" vlink="#666699" style="tab-interval:.5in">
<!--[if gte mso 9]><xml>
 <v:background id="_x0000_s1030" o:bwmode="white" o:targetscreensize="800,600">
  <v:fill src="./ZX%20Video%20Tutorial_files/image001.jpg" o:title="sumtextb"
   type="frame"/>
 </v:background></xml><![endif]-->

<div class="Section1">

<h1 align="center" style="text-align:center"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></h1>

<div style="border:none;border-bottom:solid windowtext 1.5pt;padding:0in 0in 1.0pt 0in">

<p class="MsoHeading9" style="border:none;mso-border-bottom-alt:solid windowtext 1.5pt;
padding:0in;mso-padding-alt:0in 0in 1.0pt 0in">The ZX81 Video Display System -
wilf rigter (last rev. 04/2005)</p>

</div>

<p class="MsoNormal"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></p>

<p class="MsoNormal"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><!--[if gte vml 1]><v:shapetype
 id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t"
 path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:698.25pt;
 height:534.75pt'>
 <v:imagedata src="./ZX%20Video%20Tutorial_files/image002.jpg" o:title="Dscf0579"/>
</v:shape><![endif]--><!--[if !vml]--><img width="931" height="713" src="./ZX%20Video%20Tutorial_files/image003.jpg" v:shapes="_x0000_i1025"><!--[endif]--></p>

<p class="MsoNormal"><span style="mso-spacerun:
yes">������������������������������������������� </span>ZX97 with HIRES Splash
Screen on Power Up</p>

<p class="MsoNormal"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></p>

<p class="MsoNormal"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></p>

<p class="MsoHeading8"><span style="font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Courier"><span style="mso-spacerun: yes">�</span></span>Contents</p>

<p class="MsoNormal"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></p>

<p class="MsoNormal">1. INTRODUCTION</p>

<p class="MsoNormal">2. ZX81 DISPLAY BASICS</p>

<p class="MsoNormal">3. SLOW MODE VIDEO</p>

<p class="MsoNormal">4. FASY MODE VIDEO</p>

<p class="MsoNormal">5. ZX81 VIDEO HARDWARE</p>

<p class="MsoNormal">6. ZX81 CHARACTER VIDEO HARDWARE</p>

<p class="MsoNormal">7. PSEUDO HIRES VIDEO HARDWARE</p>

<p class="MsoNormal">8.TRUE HIRES VIDEO HARDWARE</p>

<p class="MsoNormal">9.ZX81 CHARCTER DISPLAY TIMING</p>

<p class="MsoNormal">10.PSEUDO HIRES DISPLAY TIMING</p>

<p class="MsoNormal">11.TRUE HIRES DISPLAY TIMING</p>

<p class="MsoNormal">12.ZX81 SLOW MODE VIDEO ROUTINES</p>

<p class="MsoNormal">13. ZX81 FAST MODE VIDEO ROUTINES</p>

<p class="MsoNormal">14.TRUE HIRES VIDEO ROUTINES</p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto">15.
PSEUDO HIRES VIDEO ROUTINE</p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto"><span style="font-size:10.0pt;mso-bidi-font-size:12.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></p>

<p class="MsoNormal"><span style="font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:Courier">________________________________________________________________________________________________________________________
<o:p></o:p></span></p>

<h2><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">1. INTRODUCTION<o:p></o:p></span></h2>

<p class="MsoNormal"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></p>

<p><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">When
fortuitous circumstances combine innovative technical ideas with an economical
design and a market opportunity, interesting things always happen. In 1980,
Sinclair was not yet a household word and he was perhaps better known for his
digital watch and calculator than his ZX80 personal computer. However
Sinclair�s market experience with the ZX80 and new low cost LSI technology gave
him a vision and an opportunity to introduce an affordable, easy to use,
mass-producible computer version of the ZX80 with floating point math and a
non-flicker display. The ZX81 was born and "the rest is history".<o:p></o:p></span></p>

<p><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">A
key to the economical design of the ZX81 was combining the ZX80 video system,
which uses the Z80 to do most of the work, with a small circuit that was
available for the Z80 to generate a SLOW mode display.<span style="mso-spacerun: yes">� </span>When the ZX81 circuit was integrated into
the ULA chip, it was not only cheap to manufacture but the ZX81 video circuit
turned out to be versatile with display capabilities well beyond the designer's
original goals.<o:p></o:p></span></p>

<h2><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">2. ZX81 DISPLAY
BASICS<o:p></o:p></span></h2>

<p><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
standard ZX81 video screen displays 24 rows of 32 characters. Every character
has height of 8 scan lines and a width of 8 pixels. The characters to be
displayed are located in a block of memory called DFILE. The set of 128 displayable
characters includes 64 normal (white on black) uppercase only letters, numbers,
symbols and graphics characters and their inverse (black on white). The ZX81
character codes CHR$ 0-63, CHR$118 and CHR$ 128-191, are non-standard (not
ASCII). A set of token codes is also used for keywords, functions and commands
but these are always expanded to the displayable characters before printing to
DFILE. The DFILE is formatted starting with the Sinclair equivalent of a
Carriage Return (CHR$ 118) followed by up to 32 CHR$ codes, this repeated 24
times and ending with a CHR$ 118. CHR$ 118 is the opcode for the Z80 HALT
instruction for reasons which will be explained later. All other character
codes are illegal and if loaded into DFILE will generally cause a system crash.
The collapsed DFILE is used in the 1K and 2K basic ZX81 to minimize screen
memory requirements. When empty a collapsed DFILE consists of just 25 CHR$ 118
codes. Each line is expanded when characters are printed to that line. When
equipped with 4K or more of memory, DFILE is initialized to the fully expanded
format with 24 lines of 32 CHR$ 00 (space) characters and 25 CHR$ 118 line
termination characters.<o:p></o:p></span></p>

<p><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
character codes are not displayed directly but rather are used as address
pointers to a ROM video pattern table. The ROM pattern bytes are addressed by a
combination of the character code in DFILE and the ZX81 hardware and are loaded
into the video shift register. Bit 7 of the character code is used by the video
hardware to invert the pixels as they are shifted out of the shift register.
The display on the screen is generated by the serial bit stream of pixels a
video shift register which turns the TV CRT electron beam on and off as it
scans the phosphor coating on the inside face of the picture tube. A fully
expanded DFILE with 24 lines of 32 characters per row and 8 pattern bytes per
character displays 6144 pattern bytes or 49152 pixels per screen.<o:p></o:p></span></p>

<h2><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">3. SLOW MODE VIDEO<o:p></o:p></span></h2>

<p><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">In
the SLOW mode, the CPU is multitasking between video and program execution. About
80% of the CPU time allocated to video and keyboard service routines and only
about 20 % of CPU time is available to execute the application program. In
fact, the CPU time is divided in four distinct task blocks per TV frame as
shown in TABLE 1. Tasks are switched using a Non-Maskable-Interrupt (NMI)
generator to call a NMI service routine that controls task switching from the
asynchronous application program to the real-time video routines.<o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana"><span style="mso-spacerun: yes">������ </span><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">��</span>________________________________________________<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"> |<span style="mso-spacerun: yes">� </span><span style="mso-spacerun: yes">����������������������������������������������</span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"> |<span style="mso-spacerun: yes">� </span>1.<span style="mso-spacerun: yes">� </span>VSYNC, frame count and keyboard - NMI off |<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"> |<span style="mso-spacerun: yes">� </span>2.<span style="mso-spacerun: yes">� </span>Blank lines/application code<span style="mso-spacerun: yes">��� </span>- NMI on<span style="mso-spacerun: yes">� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"> |<span style="mso-spacerun: yes">� </span>3.<span style="mso-spacerun: yes">� </span>VIDEO DISPLAY routine<span style="mso-spacerun: yes">���������� </span>- NMI off |<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"> |<span style="mso-spacerun: yes">� </span>4.<span style="mso-spacerun: yes">� </span>Blank lines/application code<span style="mso-spacerun: yes">��� </span>- NMI on<span style="mso-spacerun: yes">� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"> |________________________________________________|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana"> <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana"><span style="mso-spacerun: yes">�����������</span>TABLE 1 SLOW MODE CPU TASK TABLE<o:p></o:p></span></pre>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">Each
task can be described in more detail as follows:<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">1.
During the vertical sync interval, when no video is actually displayed, the CPU
executes a fixed length VSYNC routine which increments a FRAME counter, reads 8
rows of keyboard data together with the 50/60Hz mode bit. Any I/O read
operation with A0 low (ie FE) addresses the ULA keyboard port. It also causes
the ULA to start the vertical sync pulse by clamping the video output to the 0V
sync level and simultaneously applies a reset to the ULA 3 bit line counter
(LCNTR). After the all the keyboard data is processed (400us later), the CPU
executes an OUT FF,A (any OUT will do) which restores the ULA video output to
the normal "white level with horizontal sync pulses" and releases the
LCNTR reset. At the end of the VSYNC routine, the number of blank lines to the
start of the live display is determined from the system variable MARGIN
(50/60HZ). Then the NMI generator is turned on and the CPU registers are
switched back to the application task.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">2. While
the CPU executes the application code, the CPU is interrupted every 64 us by
the NMI generator at the same time the ULA generates a horizontal sync pulse.
The NMI routine increments a blank line counter in A' and returns if there is
more time left for application code execution. When the blank line counter is
incremented to zero the NMI routine turns off the NMI generator and switches to
the VIDEO DISPLAY routine through a pointer in the IX register.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">3. The
video display routine sets up the display file pointer, the row and line
counters, enables INT and JP(HL) to the start of DFILE + 32K. Each character in
the DFILE is interpreted as a NOP instruction except the N/L character, which
terminates the line. At the end of each line, the INT service routine updates
the row and line counters and returns to execute the remaining lines. After 192
lines, the video display routine ends by turning on the NMI generator and CPU switches
back to execute application code.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">4. As
before, during the top blank lines, the NMI routine counts the number of blank
lines remaining. At the end of the bottom blank lines, the sequence repeats
when the NMI service routine switches back to the VSYNC routine.<o:p></o:p></span></p>

<h2 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">4. FAST MODE VIDEO<o:p></o:p></span></h2>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">In the
ZX80 compatible FAST mode, the CPU executes either the video routine or any
other program but not both, which causes the familiar flicker of the display when
switching between these tasks. When the application program is running, it is
executed using 100% of the available CPU time. Only if the application program
is Stopped (in the command mode) or waiting for a keyboard INPUT, or in PAUSE
mode is the video is displayed. The video hardware is activated in the same way
as the SLOW mode but NMI is always off. In addition, the blank lines at the top
and bottom of the screen are also generated in software making the ZX81 ROM
fully compatible with the ZX80 hardware.<o:p></o:p></span></p>

<h2 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">5. ZX81 VIDEO HARDWARE<o:p></o:p></span></h2>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The ZX81
video hardware consists of the Z80 CPU, ROM, RAM and the larger part of the
ZX81 Sinclair Logic Chip (usually called the ULA) as shown in FIG 1 with all
relevant connections including the isolation resistors R. For simplicity only
the 2K RAM is shown. The ULA contains a 6.5 MHz crystal oscillator and a
frequency divider, which generates horizontal sync pulses at the video output
and NMI pulses on the NMI output. The HSYNC and the NMI outputs can be
controlled with the following I/O operations.<o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">1. OUT FD,A - turns off the NMI generator<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">2. OUT FE,A - turns on<span style="mso-spacerun: yes">� </span>the NMI generator<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">3. IN A,FE<span style="mso-spacerun: yes">� </span>- turns off the HSYNC generator (only if NMI is off)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">4. OUT FF,A - turns on<span style="mso-spacerun: yes">� </span>the HSYNC generator<o:p></o:p></span></pre>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The ULA
video output switches between 3 voltage levels. It is normally at the +5V white
level for blank lines. Characters patterns are displayed as black pixels when
the level is +2.5V . The narrow horizontal sync pulses and wide vertical sync
pulses are 0V level as shown in FIG 1 waveform. These logic levels are reduced
with a resistor divider to 1V, 0.5V and 0V (UK/US) at the input of the TV RF
modulator.</span><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Courier"><o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�</span>white _<span style="mso-spacerun: yes">� </span>_____<span style="mso-spacerun: yes">��� </span>_____<span style="mso-spacerun: yes">��� </span>_________//__________//____<span style="mso-spacerun: yes">������������ </span>____//_____<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"> black _<span style="mso-spacerun: yes">�� </span>|<span style="mso-spacerun: yes">�� </span>|__|<span style="mso-spacerun: yes">���� </span>|__|<span style="mso-spacerun: yes">�� </span>|<span style="mso-spacerun: yes">������������ </span>|<span style="mso-spacerun: yes">�������� </span>|&lt;--400us--&gt;|<span style="mso-spacerun: yes">��������� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"> sync<span style="mso-spacerun: yes">� </span>_<span style="mso-spacerun: yes">�� </span>|&lt;-------64us------&gt;|&lt;---64us----&gt;|<span style="mso-spacerun: yes">�������� </span>|_____//____|<span style="mso-spacerun: yes">��������� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�������������� </span>display line<span style="mso-spacerun: yes">�������� </span>blank<span style="mso-spacerun: yes">������� </span>blank<span style="mso-spacerun: yes">�� </span>vert sync<span style="mso-spacerun: yes">���� </span>blank<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����������������������� </span>FIG 1 - VIDEO LEVELS<o:p></o:p></span></pre>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
HSYNC pulses are 5 usec wide with 64 usec between HSYNC pulses. The VSYNC is
400 usec wide with 16.6 msec or 20 msec between VSYNC pulses. VSYNC is used to
synchronize the TV vertical oscillator and start the raster scan at the top of
the screen. This occurs when IN A,FE (used for scanning the keyboard) clamps
the video output to the SYNC level. 400us later OUT FF,A releases SYNC to
enable the 64 us HSYNC pulses. The HSYNC pulses continue to be generated
independent of the CPU until the next VSYNC. <o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The CPU
executes the application code during the blank lines at the top and bottom of
the screen while the NMI generator interrupts the CPU every 64 us and
increments a blank line counter to determine if it is time for the VIDEO
DISPLAY of VSYNC routines.<o:p></o:p></span></p>

<h2 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">6. ZX81 CHARACTER VIDEO
HARDWARE<o:p></o:p></span></h2>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
Sinclair ZX81 character display generator consists of the Z80, ROM, RAM and the
larger part of the ZX81 Sinclair Logic Chip (usually called the ULA) as shown
in FIG 2 with all relevant connections including the isolation resistors R. For
simplicity only the 2K RAM is shown.<o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������� </span>ULA<span style="mso-spacerun: yes">�������������� </span>ROM<span style="mso-spacerun: yes">������� </span>Z80<span style="mso-spacerun: yes">������� </span>2K RAM<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>________________<span style="mso-spacerun: yes">������ </span>_____<span style="mso-spacerun: yes">������ </span>_____<span style="mso-spacerun: yes">������ </span>_____ <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">VIDEO&lt;-| VSHFTREG &lt;-DATA|-----|DATA |-----|DATA |--R--|DATA |<span style="mso-spacerun: yes">� </span><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�������</span>|<span style="mso-spacerun: yes">� </span>LINECTR -&gt;A0-2|-----|A0-2 |--R--|A0-2 |-----|A0-2 |<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>| CHRLATCH -&gt;A3-8|-----|A3-8 |--R--|A3-8 |-----|A3-8 |<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">��������������� </span>|<span style="mso-spacerun: yes">���� </span>|A9-12|-----|A9-13|-----|A9-11|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">���������� </span>ROMCS|-----|CE<span style="mso-spacerun: yes">�� </span>|<span style="mso-spacerun: yes">���� </span>|<span style="mso-spacerun: yes">� </span>INT|-----|A6<span style="mso-spacerun: yes">�� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">��������������� </span>|<span style="mso-spacerun: yes">���� </span>|_____|<span style="mso-spacerun: yes">���� </span>|<span style="mso-spacerun: yes">���� </span>|<span style="mso-spacerun: yes">���� </span>|<span style="mso-spacerun: yes">� </span><span style="mso-spacerun: yes">���</span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">���������� </span>RAMCS|-----------------|-----|-----|CE/OE|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">������������ </span>A14|-----------------|A14<span style="mso-spacerun: yes">� </span>|<span style="mso-spacerun: yes">���� </span>|_____|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">������������ </span>A15|-----------------|A15<span style="mso-spacerun: yes">� </span>|<span style="mso-spacerun: yes">������� </span><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�������</span>|<span style="mso-spacerun: yes">������������� </span>WR|-----------------|WR<span style="mso-spacerun: yes">�� </span>| <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�������</span>|<span style="mso-spacerun: yes">��������� </span><span style="mso-spacerun: yes">����</span>RD|-----------------|RD<span style="mso-spacerun: yes">�� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">������������� </span>M1|-----------------|M1<span style="mso-spacerun: yes">�� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">����������� </span>MREQ|-----------------|MREQ |<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">����������� </span>IORQ|-----------------|IORQ | <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�������</span>|<span style="mso-spacerun: yes">������������ </span>NMI|-----------------|NMI<span style="mso-spacerun: yes">� </span>|<span style="mso-spacerun: yes">�� </span><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�������</span>|<span style="mso-spacerun: yes">����������� </span>HALT|-----------------|HALT |<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|________________|<span style="mso-spacerun: yes">���������������� </span>|_____| <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>FIG 2 ZX81 CHARACTER VIDEO DISPLAY CIRCUIT<o:p></o:p></span></pre>

<h2 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">7. PSEUDO HIRES VIDEO
HARDWARE<o:p></o:p></span></h2>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
pseudo hires graphics video display generator consists of the Z80 CPU, ROM, RAM
and a large part of the ZX81 Sinclair Logic Chip (usually called the ULA) as
shown in FIG 2 with all relevant connections including the isolation resistors
R. For simplicity only the 2K RAM is shown.<o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������� </span>ULA<span style="mso-spacerun: yes">�������������� </span>ROM<span style="mso-spacerun: yes">������� </span>Z80<span style="mso-spacerun: yes">������� </span>2K RAM<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�� </span><span style="mso-spacerun: yes">�����</span>________________<span style="mso-spacerun: yes">������ </span>_____<span style="mso-spacerun: yes">������ </span>_____<span style="mso-spacerun: yes">������ </span>_____ <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">VIDEO&lt;-| VSHFTREG &lt;-DATA|-----|DATA |-----|DATA |--R--|DATA |<span style="mso-spacerun: yes">� </span><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�������</span>| *LINECTR -&gt;A0-2|-----|A0-2 |--R--|A0-2 |-----|A0-2 |<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>| CHRLATCH -&gt;A3-8|-----|A3-8 |--R--|A3-8 |-----|A3-8 |<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>| <span style="mso-spacerun: yes">���������������</span>|<span style="mso-spacerun: yes">���� </span>|A9-12|-----|A9-13|-----|A9-11|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">���������� </span>ROMCS|-----|CE<span style="mso-spacerun: yes">�� </span>|<span style="mso-spacerun: yes">���� </span>| *INT|-----|A6<span style="mso-spacerun: yes">�� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">��������������� </span>|<span style="mso-spacerun: yes">���� </span>|_____|<span style="mso-spacerun: yes">���� </span>|<span style="mso-spacerun: yes">���� </span>|<span style="mso-spacerun: yes">���� </span>|<span style="mso-spacerun: yes">���� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">���������� </span>RAMCS|-----------------|-----|-----|CE/OE|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">�������� </span><span style="mso-spacerun: yes">����</span>A14|-----------------|A14<span style="mso-spacerun: yes">� </span>|<span style="mso-spacerun: yes">���� </span>|_____|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">������������ </span>A15|-----------------|A15<span style="mso-spacerun: yes">� </span>|<span style="mso-spacerun: yes">������� </span><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�������</span>|<span style="mso-spacerun: yes">������������� </span>WR|-----------------|WR<span style="mso-spacerun: yes">�� </span>| <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�������</span>|<span style="mso-spacerun: yes">������������� </span>RD|-----------------|RD<span style="mso-spacerun: yes">�� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">������������� </span>M1|-----------------|M1<span style="mso-spacerun: yes">�� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">� </span><span style="mso-spacerun: yes">�����</span>|<span style="mso-spacerun: yes">����������� </span>MREQ|-----------------|MREQ |<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">����������� </span>IORQ|-----------------|IORQ | <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�������</span>|<span style="mso-spacerun: yes">������������ </span>NMI|-----------------|NMI<span style="mso-spacerun: yes">� </span>|<span style="mso-spacerun: yes">�� </span><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�������</span>|<span style="mso-spacerun: yes">����������� </span>HALT|-----------------|HALT |<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|________________|<span style="mso-spacerun: yes">���������������� </span>|_____| <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">� </span><span style="mso-spacerun: yes">�����</span>FIG 3 PSEUDO HIRES GRAPHICS DISPLAY CIRCUIT<o:p></o:p></span></pre>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The only
difference between pseudo hires and Sinclair character hardware is the *ULA
LCNTR and the use of the *INT input. Most pseudo hires core routines do not use
INT and the ULA LCNTR is reset to zero every horizontal line. The exception is
XTRICATOR which uses INT and makes dual use of the I register in INT mode 2 as
a part of the RST vector address when interrupted at the end of each horizontal
line and at refresh time as a ROM pattern table pointer.<o:p></o:p></span></p>

<h2 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">8. TRUE HIRES VIDEO HARDWARE<o:p></o:p></span></h2>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
portion of the ZX81 hardware required for true hires graphics display consists
of the Z80 CPU, the RAM, the video shift register and the sync circuit of the
ULA as shown in FIG 4 with all relevant connections. Again the 2K SRAM is shown
for simplicity but applies to larger SRAM designs as well. If a 16K RAMPACK is
used, this must be slightly modified, as will be shown later, to enable the
data outputs during RFSH time as required for this hires display method.<o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������� </span>ULA<span style="mso-spacerun: yes">�������������� </span>ROM<span style="mso-spacerun: yes">�������� </span>Z80<span style="mso-spacerun: yes">������ </span>2K RAM<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>________________<span style="mso-spacerun: yes">������ </span>_____<span style="mso-spacerun: yes">������ </span>_____<span style="mso-spacerun: yes">������ </span>_____ <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">VIDEO&lt;-| VSHFTREG &lt;-DATA|-----|DATA |-----|DATA |--R--|DATA |<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">��������������� </span>|<span style="mso-spacerun: yes">���� </span>|A0-12|-----|A0-15|-----|A0-10|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">���������� </span>ROMCS|-----|CE<span style="mso-spacerun: yes">�� </span>|<span style="mso-spacerun: yes">���� </span>|<span style="mso-spacerun: yes">���� </span>|<span style="mso-spacerun: yes">���� </span>|<span style="mso-spacerun: yes">���� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">��������������� </span>|<span style="mso-spacerun: yes">���� </span>|_____|<span style="mso-spacerun: yes">���� </span>|<span style="mso-spacerun: yes">���� </span>|<span style="mso-spacerun: yes">���� </span>|<span style="mso-spacerun: yes">���� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">���������� </span>RAMCE|-----------------|-----|-----|CE/OE|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">������������ </span>A14|-----------------|A14<span style="mso-spacerun: yes">� </span>|<span style="mso-spacerun: yes">���� </span>|_____|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">������������ </span>A15|-----------------|A15<span style="mso-spacerun: yes">� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">������������� </span>WR|-----------------|WR<span style="mso-spacerun: yes">�� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">������������� </span>RD|-----------------|RD<span style="mso-spacerun: yes">�� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">������������� </span>M1|-----------------|M1<span style="mso-spacerun: yes">�� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">����������� </span>MREQ|-----------------|MREQ |<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">����������� </span>IORQ|-----------------|IORQ |<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">������������ </span>NMI|-----------------|NMI<span style="mso-spacerun: yes">� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|<span style="mso-spacerun: yes">����������� </span>HALT|-----------------|HALT |<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>|________________|<span style="mso-spacerun: yes">���������������� </span>|_____|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������ </span>FIG 5 TRUE HIRES GRAPHICS VIDEO DISPLAY CIRCUIT<o:p></o:p></span></pre>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">With the
exception of WRX1K, which creates a miniature hires screen on a 1K ZX81, all
hires programs, need a 6K hires graphics file (HFILE). Suitable RAM for true
hires graphics can be implemented by modifying a standard 16K RAMPACK with a
couple of diodes and a resistor.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
RAMPACK is modified to enable the data output at RFSH time by cutting the RD
and RFSH lines at the edge connector and installing 2 only 1N34A Germanium
diodes and a 4.7K pull-up resistor. Modify at your own risk!<o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">��������������������������� </span>+5V<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���������������������� </span><span style="mso-spacerun: yes">������</span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�������������������������� </span>[4.7K]<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�������������������� </span>1N34A<span style="mso-spacerun: yes">�� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">connector<span style="mso-spacerun: yes">�� </span>RD _______|/|____|_____________ RD OF RAMPACK<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">��������������������� </span>|\|<span style="mso-spacerun: yes">��� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���������������������������� </span>|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">connector RFSH _______|/|____|<span style="mso-spacerun: yes">���� </span>+5V_____ RFSH of RAMPACK<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�� </span><span style="mso-spacerun: yes">�������������������</span>|\|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�������������������� </span>1N34A<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����������� </span>FIG 5 RAMPACK MODIFICATION FOR TRUE HIRES<o:p></o:p></span></pre>

<h2 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">9. ZX81 CHARACTER DISPLAY
TIMING<o:p></o:p></span></h2>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">All the
Sinclair ZX81 character display hardware shown in FIG 2 is required to generate
a standard screen of 24 lines of 32 characters. The character display starts
when the last blank line at the top of the screen has occurred and the video
routine jumps to the DFILE echo above 32K. The hardware in the ZX81 ULA takes
control when any opcode is executed above 32K (A15 high and M1 low) with data
bit 6 equal to zero. The video data is loaded in these simplified steps:<o:p></o:p></span></p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo3;tab-stops:list .5in"><!--[if !supportLists]-->1.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
ULA loads the character code into a address register in the ULA </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo3;tab-stops:list .5in"><!--[if !supportLists]-->2.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
ULA forces the data lines low. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo3;tab-stops:list .5in"><!--[if !supportLists]-->3.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
CPU interprets the byte as a NOP. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo3;tab-stops:list .5in"><!--[if !supportLists]-->4.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
ULA generates part of the ROM pattern table address and the Z80 CPU generates
the pattern table pointer with the I register. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo3;tab-stops:list .5in"><!--[if !supportLists]-->5.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
pattern byte is loaded into the ULA shift register. </p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">One
could say that the Dfile is literally executed with NOPs substituted for each
character code. Each NOP executes in 4 CPU clock cycles at 3.25 MHz or 8 pixels
at 6.5MHz from the ULA video shift register.<o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���������� </span>&lt;--------CHARACTER 1-----------&gt;&lt;--------CHARACTER 2-----------&gt;<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�� </span>T STATE &lt;--T1--&gt;&lt;--T2--&gt;&lt;--T3--&gt;&lt;--T4--&gt;&lt;--T1--&gt;&lt;--T2--&gt;&lt;--T3--&gt;&lt;--T4--&gt;<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>(ref)<span style="mso-spacerun: yes">� </span>___<span style="mso-spacerun: yes">��� </span>1___2<span style="mso-spacerun: yes">�� </span>3___<span style="mso-spacerun: yes">���� </span>___5<span style="mso-spacerun: yes">��� </span>___<span style="mso-spacerun: yes">���� </span>___<span style="mso-spacerun: yes">���� </span>___<span style="mso-spacerun: yes">���� </span>___<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"> CPU CLOCK |<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���������� </span>_ _______________ _______________ _______________ _______________<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">��� </span>A0-A15 _X_____PC________X___I+CHR+ULA___X______PC_______X___I+CHR+ULA___X<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">��������������� </span>________<span style="mso-spacerun: yes">� </span>NOP<span style="mso-spacerun: yes">� </span>__________<span style="mso-spacerun: yes">������ </span>________<span style="mso-spacerun: yes">� </span>NOP<span style="mso-spacerun: yes">� </span>__________<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>DATA &gt;---|__CHR___|_____|_ROM DATA_|-----|__CHR___|_____|_ROM DATA_|--<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������������� </span>FIG 6 ZX81 CHARACTER DISPLAY TIMING</span><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana"> <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.25in;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">The
detailed sequence of operations for each character byte is shown in FIG 6 and
described as follows: </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.75in;text-indent:-.25in;mso-list:l3 level1 lfo5;tab-stops:list .75in"><!--[if !supportLists]-->1.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->Each
character code (CHR$) byte in DFILE is addressed by the CPU PC, on the rising
edge T2 data is loaded from DFILE into the ULA: bits 0-5 into a 6 bit ULA
address latch while bit 7 is loaded into 1 bit ULA video invert latch </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.75in;text-indent:-.25in;mso-list:l3 level1 lfo5;tab-stops:list .75in"><!--[if !supportLists]-->2.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->On the
falling edge of T2, the ULA forces all CPU data lines to zero.</p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.75in;text-indent:-.25in;mso-list:l3 level1 lfo5;tab-stops:list .75in"><!--[if !supportLists]-->3.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->On the
rising edge of T3 the low data lines are interpreted by the CPU as a NOP
instruction. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.75in;text-indent:-.25in;mso-list:l3 level1 lfo5;tab-stops:list .75in"><!--[if !supportLists]-->4.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->During
T3/4, the CPU executes the Refresh cycle and ROM address lines are generated
with I register on A9-A15, the ULA 6 bit character code register on A3-A8, and
the ULA modulo 8 line counter on line A0-A2. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.75in;text-indent:-.25in;mso-list:l3 level1 lfo5;tab-stops:list .75in"><!--[if !supportLists]-->5.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->On the
falling edge of T4, pattern data from the ROM is loaded into ULA video shift
register and 8 video pixels are shifted out at 6.5MHz </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.75in;text-indent:-.25in;mso-list:l3 level1 lfo5;tab-stops:list .75in"><!--[if !supportLists]-->6.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->If
character code latch bit 7<span style="mso-spacerun: yes">� </span>(in the ULA)
equals 1, the video pixels are inverted. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.75in;text-indent:-.25in;mso-list:l3 level1 lfo5;tab-stops:list .75in"><!--[if !supportLists]-->7.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
CPU increments the program counter and fetches the next character code. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.75in;text-indent:-.25in;mso-list:l3 level1 lfo5;tab-stops:list .75in"><!--[if !supportLists]-->8.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->This
repeats until a HALT (Sinclair) is fetched. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.75in;text-indent:-.25in;mso-list:l3 level1 lfo5;tab-stops:list .75in"><!--[if !supportLists]-->9.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->HALT
opcode bit 6 = 1 and is therefore executed (no NOP).</p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.75in;text-indent:-.25in;mso-list:l3 level1 lfo5;tab-stops:list .75in"><!--[if !supportLists]-->10.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><!--[endif]-->The ULA generates a HSYNC pulse independent of the CPU timing
and the ULA LCNTR is incremented </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.75in;text-indent:-.25in;mso-list:l3 level1 lfo5;tab-stops:list .75in"><!--[if !supportLists]-->11.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><!--[endif]-->The halted CPU continues to execute NOPs, incrementing
register R and samples the INT input on the rising edge of each T4.</p>

<p class="MsoBodyTextIndent" style="margin-left:.75in;text-indent:-.25in;
mso-list:l3 level1 lfo5;tab-stops:list .75in"><!--[if !supportLists]-->12.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><!--[endif]-->When A6, which is hardwired to INT, goes low during refresh
time, (bit 6 of the R reg = 0), the Z80 executes the INT routine (below 32K)</p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.75in;text-indent:-.25in;mso-list:l3 level1 lfo5;tab-stops:list .75in"><!--[if !supportLists]-->13.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><!--[endif]-->CPU returns from INT and resumes "execution" of
DFILE CHR$ codes.</p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.75in;text-indent:-.25in;mso-list:l3 level1 lfo5;tab-stops:list .75in"><!--[if !supportLists]--><span style="font-family:Courier">14.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><!--[endif]-->The process repeats 192 times and then INT routine
returns to the main video routine, turns on the NMI generator and switches back
to the application code. <span style="font-family:Courier"><o:p></o:p></span></p>

<h2 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">10. PSEUDO HIRES DISPLAY
TIMING<o:p></o:p></span></h2>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">All the ZX81
character display hardware shown in FIG 2 with some exceptions is required to
generate a standard screen of 192 lines of 32 pseudo hires patterns. The
display starts when the last blank line at the top of the screen has occurred
and the video routine jumps to the 6K DFILE echo above 32K. The hardware in the
ZX81 ULA takes control when any opcode is executed above 32K (A15 high and M1
low) with data bit 6 equal to zero.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
video data is loaded in five steps:<o:p></o:p></span></p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l1 level1 lfo8;tab-stops:list .5in"><!--[if !supportLists]-->1.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
ULA loads the character code into an address register </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l1 level1 lfo8;tab-stops:list .5in"><!--[if !supportLists]-->2.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
ULA forces the data lines low. 3. The CPU interprets the byte as a NOP. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l1 level1 lfo8;tab-stops:list .5in"><!--[if !supportLists]-->3.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
ULA generates part of the ROM pattern table address. The CPU generates the
pattern table MSB address with the I register. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l1 level1 lfo8;tab-stops:list .5in"><!--[if !supportLists]-->4.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
quasi hires pattern byte is loaded into the ULA shift register. </p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">Each NOP
executes in 4 CPU clock cycles at 3.25 MHz or 8 pixels at 6.5MHz from the ULA
video shift register.<o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���������� </span>&lt;--------CHARACTER 1-----------&gt;&lt;--------CHARACTER 2-----------&gt;<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�� </span>T STATE &lt;--T1--&gt;&lt;--T2--&gt;&lt;--T3--&gt;&lt;--T4--&gt;&lt;--T1--&gt;&lt;--T2--&gt;&lt;--T3--&gt;&lt;--T4--&gt;<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>(ref)<span style="mso-spacerun: yes">� </span>___<span style="mso-spacerun: yes">��� </span>1___2<span style="mso-spacerun: yes">�� </span>3___<span style="mso-spacerun: yes">���� </span>___5<span style="mso-spacerun: yes">��� </span>___<span style="mso-spacerun: yes">���� </span>___<span style="mso-spacerun: yes">���� </span>___<span style="mso-spacerun: yes">���� </span>___<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"> CPU CLOCK |<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���������� </span>_ _______________ _______________ _______________ _______________<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">��� </span>A0-A15 _X_____PC________X___I+CHR+ULA___X______PC_______X___I+CHR+ULA___X<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">��������������� </span>________<span style="mso-spacerun: yes">� </span>NOP<span style="mso-spacerun: yes">� </span>__________<span style="mso-spacerun: yes">������ </span>________<span style="mso-spacerun: yes">� </span>NOP<span style="mso-spacerun: yes">� </span>__________<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>DATA &gt;---|__CHR___|_____|_ROM DATA_|-----|__CHR___|_____|_ROM DATA_|--<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������������ </span><span style="mso-spacerun: yes">�</span>FIG 7 SINCLAIR CHARACTER DISPLAY TIMING<o:p></o:p></span></pre>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
detailed sequence of operations for each character byte is as follows:<o:p></o:p></span></p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo11;tab-stops:list .5in"><!--[if !supportLists]-->1.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->Each
character code (CHR$) byte in DFILE is addressed by the CPU PC, on the rising
edge T2 data is loaded from DFILE into the ULA: bits 0-5 into a 6 bit ULA
address latch while bit 7 is loaded into 1 bit ULA video invert latch </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo11;tab-stops:list .5in"><!--[if !supportLists]-->2.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->On the
falling edge of T2, the ULA forces all CPU data lines to zero. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo11;tab-stops:list .5in"><!--[if !supportLists]-->3.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->On the
rising edge of T3 the low data lines are interpreted by the CPU as a NOP
instruction. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo11;tab-stops:list .5in"><!--[if !supportLists]-->4.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->During
T3/4, the CPU executes the Refresh cycle and ROM address lines are generated
with I register on A9-A15, the ULA 6 bit character code register on A3-A8, and
zero on line A0-A2. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo11;tab-stops:list .5in"><!--[if !supportLists]-->5.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->On the
falling edge of T4, pattern data from the ROM is loaded into ULA video shift
register and 8 video pixels are shifted out at 6.5MHz </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo11;tab-stops:list .5in"><!--[if !supportLists]-->6.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->If
character code latch bit 7<span style="mso-spacerun: yes">� </span>(in the ULA)
equals 1, video pixels are inverted. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo11;tab-stops:list .5in"><!--[if !supportLists]-->7.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
CPU increments the program counter and fetches the next character code. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo11;tab-stops:list .5in"><!--[if !supportLists]-->8.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->This
repeats until a RET fetched which returns to the hires routine. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo11;tab-stops:list .5in"><!--[if !supportLists]-->9.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->RET
opcode bit 6 = 1 and is therefore executed (no NOP) </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo11;tab-stops:list .5in"><!--[if !supportLists]-->10.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><!--[endif]-->The ULA generates a HSYNC pulse independent of the CPU timing
and the ULA LCNTR is incremented but the video software resets the LCNTR to
zero. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo11;tab-stops:list .5in"><!--[if !supportLists]-->11.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><!--[endif]-->CPU returns from the hires routine and resumes
"execution" of DFILE CHR$ codes. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo11;tab-stops:list .5in"><!--[if !supportLists]-->12.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><!--[endif]-->The process repeats 192 times and then hires routine ends by
turning on the NMI generator and by switching back to the application code. </p>

<h2 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">11. TRUE HIRES DISPLAY
TIMING<o:p></o:p></span></h2>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">Although
I will use the WRX hires core routine as an example, the true hires software
developed independently by others is very similar. The true hires display
starts when the last blank line at the top of the screen has occurred, and NMI
jumps via IX to the HR video routine. HR sets up the I and R register pointers
to the hires display file (HFILE), then the HR routine jumps to the LBUF
routine echo above 32K and loads register R and points to the first NOP opcode.
The ULA loads the video shift register when any opcode is executed with A15
high and M1 low and data bit 6 equal to zero.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
hires data is loaded in 3 steps:<o:p></o:p></span></p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l5 level1 lfo14;tab-stops:list .5in"><!--[if !supportLists]-->1.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
CPU executes each of the 4T state NOP instructions. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l5 level1 lfo14;tab-stops:list .5in"><!--[if !supportLists]-->2.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->During
T3/4 (refresh), the I and R registers appear on the A0-15 lines. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l5 level1 lfo14;tab-stops:list .5in"><!--[if !supportLists]-->3.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
hires byte addressed by I and R is loaded into the ULA shift register. </p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">LBUF
consists 32 NOP opcodes, each executing in 4 CPU clock cycles. During the
second part of the opcode execution, the I and R register address the hires
byte in HFILE which the ULA loads into the video shift register. The ULA
generated ROM address for the pattern table is not used since ROMCS is not
enabled as register I (A8-15) is set up to point to the RAM based HFILE.<o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���������� </span>&lt;---------HIRESBYTE1-----------&gt;&lt;---------HIRESBYTE2-----------&gt;<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">�� </span>T STATE &lt;--T1--&gt;&lt;--T2--&gt;&lt;--T3--&gt;&lt;--T4--&gt;&lt;--T1--&gt;&lt;--T2--&gt;&lt;--T3--&gt;&lt;--T4--&gt;<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����������� </span>___<span style="mso-spacerun: yes">���� </span>___<span style="mso-spacerun: yes">���� </span>___<span style="mso-spacerun: yes">���� </span>___<span style="mso-spacerun: yes">���� </span>___<span style="mso-spacerun: yes">���� </span>___<span style="mso-spacerun: yes">���� </span>___<span style="mso-spacerun: yes">���� </span>___<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"> CPU CLOCK |<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<span style="mso-spacerun: yes">�� </span>|___|<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���������� </span>_ _______________ _______________ _______________ _______________<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">��� </span>A0-A15 _X______PC_______X______I_+_R____X______PC_______X______I_+_R____X<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">��������������� </span>____________<span style="mso-spacerun: yes">��� </span>_________<span style="mso-spacerun: yes">������ </span>____________<span style="mso-spacerun: yes">��� </span>_________<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>DATA &gt;---|_____NOP____|--|__HIRES__|-----|_____NOP____|--|__HIRES__|--<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����������������������� </span>FIG 8 TRUE HIRES DISPLAY TIMING<o:p></o:p></span></pre>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
detailed sequence of operations for each HIRES byte is as follows:<o:p></o:p></span></p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l4 level1 lfo17;tab-stops:list .5in"><!--[if !supportLists]-->1.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
first opcode of the LBUF routine, LD R,A is executed. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l4 level1 lfo17;tab-stops:list .5in"><!--[if !supportLists]-->2.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
following 32 NOPs in LBUF are sequentially executed. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l4 level1 lfo17;tab-stops:list .5in"><!--[if !supportLists]-->3.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->On the
rising edge of T3 of each instruction fetch, the CPU executes the NOP. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l4 level1 lfo17;tab-stops:list .5in"><!--[if !supportLists]-->4.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->During
T3/4, the address is generated with the R register on A0-7 and the I register
on A8-A15. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l4 level1 lfo17;tab-stops:list .5in"><!--[if !supportLists]-->5.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->On the
falling edge of T4, a hires data byte from HFILE is loaded into ULA video shift
register and 8 video pixels are shifted out at 6.5MHz </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l4 level1 lfo17;tab-stops:list .5in"><!--[if !supportLists]-->6.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
CPU increments the program counter and the R register and fetches the next NOP
and the next hires byte. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l4 level1 lfo17;tab-stops:list .5in"><!--[if !supportLists]-->7.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->This
process repeats 32 times. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l4 level1 lfo17;tab-stops:list .5in"><!--[if !supportLists]-->8.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
last opcode of LBUF, JP (IX), is executed to return to the HR routine. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l4 level1 lfo17;tab-stops:list .5in"><!--[if !supportLists]-->9.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp; </span><!--[endif]-->The
ULA generates a horizontal sync pulse. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l4 level1 lfo17;tab-stops:list .5in"><!--[if !supportLists]-->10.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><!--[endif]-->The HLINE routine increment the I/R register pair by 32 and
jumps back to the 32 NOP LBUF routine echo above 32K. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l4 level1 lfo17;tab-stops:list .5in"><!--[if !supportLists]-->11.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><!--[endif]-->The process repeats 192 times. </p>

<p class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-indent:-.25in;mso-list:l4 level1 lfo17;tab-stops:list .5in"><!--[if !supportLists]-->12.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><!--[endif]-->The HIRES video routine may call the Sinclair character
routine for the bottom line and restores the registers etc to return to the
application code. </p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">Like the
other hires routines WRX intercepts the Sinclair video by loading a new video
routine vector in the IX register.<o:p></o:p></span></p>

<h2 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">12. ZX81 SLOW MODE VIDEO
ROUTINES<o:p></o:p></span></h2>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">As shown
in TABLE 1 the CPU is multitasking between the video routines and the
application program in 4 blocks of time.<o:p></o:p></span></p>

<h3 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:14.0pt">1. VSYNC INTERVAL ROUTINES<o:p></o:p></span></h3>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">0229 DISPLAY-1 DECREMENT FRAME COUNTER<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">023E DISPLAY-2 CHECK KEYBOARD (START OF VSYNC)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">0277 OUT FF,A<span style="mso-spacerun: yes">� </span>ENDS THE VSYNC PULSE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">0292 DISPLAY-3 SAVE THE VIDEO POINTER IN IX (0281), RETURN TO APPLICATION<o:p></o:p></span></pre>

<h3 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:14.0pt">2. APPLICATION PROGRAM<o:p></o:p></span></h3>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">0066 NMI<span style="mso-spacerun: yes">������ </span>COUNTS BLANK LINES, RETURN TO APPLICATION OR VIA JP (IX) TO 0281<o:p></o:p></span></pre>

<h3 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:14.0pt">3. DFILE DISPLAY ROUTINES<o:p></o:p></span></h3>

<p class="MsoNormal" style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">0281 VIDEO-1<span style="mso-spacerun: yes">��� </span>- SETUP DISPLAY PARAMETERS, CALL 2B5 (RETURN VIA INT)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">02B5 DISPLAY-5 - SETUP DISPLAY PARAMETERS, ENABLE INTERRUPT, JP (DFILE)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">XXXX (DFILE)<span style="mso-spacerun: yes">���� </span>- EXECUTES HALTs AND FORCED NOPs IN DFILE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">0038 INT<span style="mso-spacerun: yes">���������� </span>- DECREMENTS ROW/LINES COUNTERS RETURN TO DFILE OR TO 028B<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">0292 DISPLAY-3<span style="mso-spacerun: yes">� </span>- SAVE VIDEO POINTER (028F)<o:p></o:p></span></pre>

<h3 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:14.0pt">4. APPLICATION PROGRAM<o:p></o:p></span></h3>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">0066 NMI<span style="mso-spacerun: yes">������ </span>COUNTS BLANK LINES, RETURN TO APPLICATION OR VIA JP (IX) TO 028F<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">028F VIDEO-2 JP 229<span style="mso-spacerun: yes">� </span>BACK TO FRAME COUNTER in BLOCK 1<o:p></o:p></span></pre>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The ZX81
video routines follow in fully annotated listings showing more details than IAN
LOGAN ZX81 DISASSEMBLY. Needless to say, I used Dr. Logan�s book extensively
during my research into the ZX81 video code.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">NOTE:
Only code that is relevant to video is shown here.<o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">0038<span style="mso-spacerun: yes">�������������� </span>;INT SERVICE ROUTINE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>DEC C<span style="mso-spacerun: yes">�������� </span>;decrement the scan line counter in register C<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>JP NZ 0045<span style="mso-spacerun: yes">��� </span>;go SCAN-LINE : repeats 8 times for each DFILE character row<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>POP HL<span style="mso-spacerun: yes">������� </span>;point to the start of next DFILE row<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>DEC B<span style="mso-spacerun: yes">�������� </span>;decrement the ROW counter in register B<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>RET Z<span style="mso-spacerun: yes">�������� </span>;return to 028B<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>SET 3,C<span style="mso-spacerun: yes">������ </span>;load scan line counter in register C with 08 scan lines<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">0041<span style="mso-spacerun: yes">�������������� </span>;WAIT-INT<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>LD R,A<span style="mso-spacerun: yes">������� </span>;load value DD into register R<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>EI<span style="mso-spacerun: yes">������� </span><span style="mso-spacerun: yes">����</span>;enable INT<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>JP (HL)<span style="mso-spacerun: yes">������ </span>;execute the NOPs in DFILE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">0045<span style="mso-spacerun: yes">�������������� </span>;SCAN-LINE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>POP DE<span style="mso-spacerun: yes">������� </span>;discard the return address<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>RET Z<span style="mso-spacerun: yes">�������� </span>;delay (never returns)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>JR 0041<span style="mso-spacerun: yes">������ </span>;got WAIT-INT<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������������ </span>;----------------------------------------------------------<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">0066<span style="mso-spacerun: yes">�������������� </span>;NMI SERVICE ROUTINE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������������ </span>;Interrupts application program every 64 usec (HSYNC)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>EX AF,AF'<span style="mso-spacerun: yes">���� </span>;retrieve blank line counter in AF'<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>INC A<span style="mso-spacerun: yes">�������� </span>;next blank line<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>JP M 006D<span style="mso-spacerun: yes">���� </span>;RETURN via 006D if AF' = FF (to NMI-EXIT)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>JR Z 006F<span style="mso-spacerun: yes">���� </span>;JR NMI-CONT if last line<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">006D EX AF,AF'<span style="mso-spacerun: yes">���� </span>;save blank line counter<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>RET<span style="mso-spacerun: yes">���������� </span>;return to application or NMI-EXIT<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">006F<span style="mso-spacerun: yes">�������������� </span>;NMI-CONT<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>EX AF,AF'<span style="mso-spacerun: yes">���� </span>;retrieve main register AF<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>PUSH AF<span style="mso-spacerun: yes">������ </span>;now save the application program registers<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>PUSH BC<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>PUSH DE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>PUSH HL<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>LD HL,(DFILE) ;needed only if IX=0281 and<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>SET 7,H<span style="mso-spacerun: yes">������ </span>;if DFILE is executed<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>HALT<span style="mso-spacerun: yes">��������� </span>;1T state synchronization: this HALT is used with special<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������������ </span>;hardware connected to the CPU WAIT and HALT lines and is<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������������ </span>;released and synchronized on the falling of the NMI pulse<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">007A<span style="mso-spacerun: yes">�������������� </span>;NMI-EXIT<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>OUT FD,A<span style="mso-spacerun: yes">����� </span>;turn off NMI generator<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>JP (IX)<span style="mso-spacerun: yes">������ </span>;to VIDEO-1 or VIDEO-2<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������������ </span>;---------------------------------------------------------<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">0229<span style="mso-spacerun: yes">�������������� </span>;DISPLAY-1<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>LD HL,(FRAMES);get the system variable FRAMES<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>DEC HL<span style="mso-spacerun: yes">������� </span>;decrement each frame<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>.....<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>LD (FRAMES),HL;save the system variable FRAMES<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">023E<span style="mso-spacerun: yes">�������������� </span>;DISPLAY-2<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>CALL 02BB<span style="mso-spacerun: yes">���� </span>;read the keyboard and load MARGIN with blank lines<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>.....<span style="mso-spacerun: yes">�������� </span>;also starts the VSYNC pulse<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">0277 OUT FF,A<span style="mso-spacerun: yes">����� </span>;stops the VSYNC pulse<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>LD HL,(DFILE) ;(FAST VIDEO only) - point HL to first HALT for blank lines<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>SET 7,H<span style="mso-spacerun: yes">������ </span>;(FAST VIDEO only) - DFILE echo above 32K<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">027E CALL 0292<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">0281<span style="mso-spacerun: yes">�������������� </span>;VIDEO-1<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������������ </span>;this vector is saved in register IX at 0292<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>LD A,R<span style="mso-spacerun: yes">������� </span>;delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>LD BC,1901<span style="mso-spacerun: yes">��� </span>;set up INT parameters for first HALT at (DFILE)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>LD A,F5<span style="mso-spacerun: yes">������ </span>;set up R register for first HALT at (DFILE)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>CALL 2B5<span style="mso-spacerun: yes">����� </span>;continue setup for DFILE display and return via INT<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">028B<span style="mso-spacerun: yes">�������� </span><span style="mso-spacerun: yes">������</span>;return here from last INT<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>DEC HL<span style="mso-spacerun: yes">������� </span>;(FAST VIDEO only) - point HL to last HALT for blank lines<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>CALL 292<span style="mso-spacerun: yes">����� </span>;save VIDEO vector in IX, calculate blank lines, POP regs<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">028F JP 0229<span style="mso-spacerun: yes">������ </span>;VIDEO-2<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������������ </span>;this vector is saved in register IX at 0292<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">0292<span style="mso-spacerun: yes">�������������� </span>;DISPLAY-3<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>POP IX<span style="mso-spacerun: yes">������� </span>;IX=0281 or 028F to vestor to VIDEO-1 or VIDEO-2<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>LD C,(IY+56)<span style="mso-spacerun: yes">� </span>;load number of blank lines from MARGIN (1F in 60 Hz option)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>BIT 7,(IY+59) ;test FAST/SLOW bit<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>JR Z,2A9<span style="mso-spacerun: yes">����� </span>;(FAST VIDEO)<span style="mso-spacerun: yes">� </span>branches to generate blank lines<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>LD A,C<span style="mso-spacerun: yes">������� </span>;C=(MARGIN)=1F for 60 Hz<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>NEG<span style="mso-spacerun: yes">���������� </span>;<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>INC A<span style="mso-spacerun: yes">�������� </span>;<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>EX AF,AF'<span style="mso-spacerun: yes">���� </span>;during NMI @ 0066 - AF' is incremented and tested for zero<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>OUT (FE),A<span style="mso-spacerun: yes">��� </span>;turn on NMI generator<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>POP HL<span style="mso-spacerun: yes">������� </span>;self explanatory<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>POP DE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>POP BC<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>POP AF<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>RET;<span style="mso-spacerun: yes">���������� </span>return to application program interrupted every HSYNC by NMI<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������������ </span>;-----------------------------------------------------------<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">02B5<span style="mso-spacerun: yes">����������� </span><span style="mso-spacerun: yes">���</span>;DISPLAY-5<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>LD R,A<span style="mso-spacerun: yes">������� </span>;R increments with each opcode on A0 to A7 during RFSH<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������������ </span>;until A6 goes low which generates the INT signal.<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>LD A,DD<span style="mso-spacerun: yes">������ </span>;Set the left margin of all other lines, load to R at 0041<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>EI<span style="mso-spacerun: yes">����������� </span>;Now that R is set up enable INT<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>JP (HL)<span style="mso-spacerun: yes">������ </span>;"executes" the DFILE starting with HALT and waits for the<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������������ </span>;first INT to come to the rescue.<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������������������ </span>;-----------------------------------------------------------<o:p></o:p></span></pre>

<h2 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">13. ZX81 FAST MODE VIDEO
ROUTINES<o:p></o:p></span></h2>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">In order
to speed up application program execution time, the FAST mode uses 100% of the
CPU time for executing the application program but there are times when the
application program is idle. When the program is Stopped or Paused or waiting
for keyboard INPUT, the keyboard is checked and if no key is down the video is
generated independent of NMI pulses. In fact, the ZX81 FAST mode video routine
was designed to be compatible with the ZX80 hardware so the ROM could be used
as a retrofit ROM upgrade. Since the ZX80 generates the blank lines in
software, the ZX81 ROM does the same when in the FAST mode.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The loop
of VIDEO routines for FAST video starts with the FRAME/KBD/VSYNC routine at
229:<o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">0229 DECREMENT FRAME COUNTER<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">023D EXIT FAST VIDEO IF FRAMES=0 (END OF PAUSE)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">023E CHECK KEYBOARD<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">0260 EXIT FAST VIDEO IF NEW KEY PRESSED<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">0292 SAVE THE VIDEO POINTER IN IX (0281)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">029B JR Z 02A9 TO BLANK LINE ROUTINE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">02A9 GENERATE BLANK LINES<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">02B3 JP (IX) TO<span style="mso-spacerun: yes">� </span>0281<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">0281 GENERATE THE DFILE DISPLAY<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">0292 SAVE VIDEO POINTER (028F)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">029B JR Z 02A9 TO BLANK LINE ROUTINE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">02A9 GENERATE BLANK LINES<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">02B3 JP (IX) TO 028F)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Verdana">028F JP 229<span style="mso-spacerun: yes">� </span>BACK TO FRAME COUNTER<o:p></o:p></span></pre>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">Since
most of the routines were described in the SLOW MODE VIDEO chapter, only the
differences are described here. Compare the way the SLOW mode enters this loop
from end of blank line application program execution by saving the main
registers of the program and restoring them at the end of 0292. By contrast,
the FAST mode does not save any registers and branches out of the 0292 restore
main register routine to literally generate the blank lines. This is done at
029B after testing the FAST flag and jumping to a less known routine called
DISPLAY-4<o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">02A9<span style="mso-spacerun: yes">�������������� </span>;DISPLAY-4<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>LD A,FC<span style="mso-spacerun: yes">������ </span>;first R delay to INT<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>LD B,01<span style="mso-spacerun: yes">������ </span>;one row<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>CALL 02B5<span style="mso-spacerun: yes">���� </span>;display blank lines<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>DEC HL<span style="mso-spacerun: yes">������� </span>;point back to HALT<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>EX (SP),HL<span style="mso-spacerun: yes">��� </span>;delay 19T<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>EX (SP),HL<span style="mso-spacerun: yes">��� </span>;delay 19T<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>JP (IX)<span style="mso-spacerun: yes">������ </span>;IX = 0281 or 028F<o:p></o:p></span></pre>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
routine at 02A9 is called twice each frame to generate the top and bottom blank
lines with HL pointing to either the first HALT at the start of DFILE or the
last HALT at end of DFILE. Reg C holds the number of blank lines and reg B is
set up for 1 row. After VSYNC the 31 top blank lines are generated by calling
the display routine at 02B5 and executing the first HALT at the START of DFILE
31 times. After returning from the display routine HL points to the last HALT+1
and DEC HL is required point HL back to the last HALT of DFILE. After saving
the return address in IX, the routine at 029A is reentered with HL pointing to
the last HALT and generates the bottom 31 blank lines by executing the HALT at
the END of DFILE.<o:p></o:p></span></p>

<h2 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">14. TRUE HIRES VIDEO
SOFTWARE<o:p></o:p></span></h2>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The true
hires core routines are distinguished by the use of the I and R register pair
as address pointers for the display file. The only other requirement is to
execute 32 NOP instructions (or equal) per horizontal line and to update the I
and R registers during HSYNC time. More blank lines can be used above and below
the display for faster application execution. The listings are compatible
source code for the ZXAS assembler both on the ZX81 and under XTender, the ZX81
emulator form CARLO DELHEZ. Check current version of XTender for hires
compatibility.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">These
ASCII listings can be used to prepare a formatted 2 REM .l file with the
ZXAS.COM program from Jack Raats.<o:p></o:p></span></p>

<h3 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:14.0pt">WRX16 - 1984 wilf rigter<o:p></o:p></span></h3>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">This is
the hires core used in programs by FRED NACHBAUR and GREG HARDER. It creates a
256x192 high resolution display in a 6144 byte array starting at (HFILE), which
can be poked directly from BASIC programs.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">START is
used to start the hires display and STOP restores the SINCLAIR video. It has a
characteristic signature with the I register value greater than 2000 hex.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">PART 1
calls LBUF 192 times, displaying 256x192 pixels, calculates blank lines, saves
pointer to PART 2 in IX and returns to application code. PART 2 calls VSYNC
etc, calculates blank lines, saves pointer to PART 2 in IX and returns to
application code execution.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;ORIGIN = 16516 (hex 4084)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">LBUF<span style="mso-spacerun: yes">� </span>;Displays one line of 256 pixels<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;------------------------------<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;like DFILE, it is called above 32K to activate the ULA video<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;hardware. The hires bytes may be inverted for special effects<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;by setting bit 7 of the NOP codes . The hires data is loaded<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;into the ULA video shift register during the refresh cycles of<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;the 32 NOP opcodes when the I and R registers sequentially<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;address 32 bytes of hires data in the 6144 byte HFILE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">LBUF<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD R,A<span style="mso-spacerun: yes">���� </span>;Now load R register<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>00 00 00 00;32 bytes of 8 pixels<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>00 00 00 00<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>00 00 00 00<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>00 00 00 00<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>00 00 00 00<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>00 00 00 00<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>00 00 00 00<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>00 00 00 00<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JP (IX)<span style="mso-spacerun: yes">��� </span>;Return to HR<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR<span style="mso-spacerun: yes">��� </span>;HIRES DISPLAY ROUTINE PART 1<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;----------------------------<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD B,04<span style="mso-spacerun: yes">��� </span>;load delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR0<span style="mso-spacerun: yes">�� </span>DJNZ HR0<span style="mso-spacerun: yes">�� </span>;delay 56T states to synchronize with HSYNC pulses.<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD HL,(HFILE);RAMTOP points to the first HFILE byte<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD B,C0<span style="mso-spacerun: yes">��� </span>;48 horizontal lines<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD IX,HR1<span style="mso-spacerun: yes">� </span>;save the return vector in IX (for JP (IX) at end of LBUF)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JR HR2<span style="mso-spacerun: yes">���� </span>;skip HR1 first time through the loop<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR1<span style="mso-spacerun: yes">�� </span>LD DE,20<span style="mso-spacerun: yes">�� </span>;this value for 32 bytes or 256 pixels per line is<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>ADD HL,DE<span style="mso-spacerun: yes">� </span>;added to HL to point to the start of the next HLINE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>DEC B<span style="mso-spacerun: yes">����� </span>;repeat 48 times<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JP Z HR3<span style="mso-spacerun: yes">�� </span>;if this is the last line JP to HR3<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR2<span style="mso-spacerun: yes">�� </span>LD A,H<span style="mso-spacerun: yes">���� </span>;the address in HL is then transferred to<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD I,A<span style="mso-spacerun: yes">���� </span>;I register<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD A,L<span style="mso-spacerun: yes">���� </span>;and during LBUF to the R register<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JP C084<span style="mso-spacerun: yes">��� </span>;jump to LBUF @ 4084 + 8000 to start the ULA<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR3<span style="mso-spacerun: yes">�� </span>LD IX,HR4<span style="mso-spacerun: yes">� </span>;save the video vector so that NMI returns to HR4<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JR HR5<span style="mso-spacerun: yes">���� </span>;now get blank lines and return to application code<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR4<span style="mso-spacerun: yes">�� </span>;HIRES DISPLAY ROUTINE PART 2<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;----------------------------<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>CALL 220<span style="mso-spacerun: yes">�� </span>;first PUSH registers then jump to VSYNC, etc<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD IX,WRX16;save the video vector so that NMI returns to HR<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR5<span style="mso-spacerun: yes">�� </span>LD A,(4028);33 or 19 blank lines in system variable MARGIN<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JP 29E<span style="mso-spacerun: yes">���� </span>;save blank lines, start NMI, POP registers and RETURN<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;--------------------- end of listing ---------------------<o:p></o:p></span></pre>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
hires video is started and stopped by changing the vector address in register
IX which is used by NMI to JP (IX) to the video routine. The following routines
are synchronized with the display so that the changeover in video mode occurs
without display breakup.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">STOP<span style="mso-spacerun: yes">� </span>;STOP hires video and return to SINCLAIR video<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;---------------------------------------------<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD HL,0281 ;pointer to SINCLAIR video routine<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD A,1E<span style="mso-spacerun: yes">��� </span>;SINCLAIR ROM pattern table MSB base address (1E00)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD I,A<span style="mso-spacerun: yes">���� </span>;pointer to I register<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JR SYNC<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">START ;Start the hires video<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;---------------------<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD HL,HR<span style="mso-spacerun: yes">�� </span>;pointer to the hires video routine<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">SYNC<span style="mso-spacerun: yes">� </span>;used by START and STOP to smoothly change video mode<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;----------------------------------------------------<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>PUSH HL<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD HL,4034 ;FRAMES counter<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD A,HL<span style="mso-spacerun: yes">��� </span>;get old FRAMES<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">SYNC1 CP A,(HL)<span style="mso-spacerun: yes">� </span>;compare to new FRAMES<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JR Z SYNC1 ;exit after a change is detected<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>POP IX<span style="mso-spacerun: yes">���� </span>;SINCLAIR video routine<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>;-------------- END OF LISTING ---------------<o:p></o:p></span></pre>

<h3 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:14.0pt">GUUS-FLATER by ENNO
BORGESTEEDE (1984)<o:p></o:p></span></h3>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">This
hires core uses an ingenious way to intercept the video vector. Instead of
changing the value of the IX register, GUUS-FLATER intercepts at the beginning
of the DFILE execution by changing the first 4 bytes including the HALT to DI
and JP 409F which is the start of the hires routine. At the end of the hires
screen the program simply returns to ROM routine at xxxx. It has a
characteristic DFILE starting with the DI and JP 409F and the HFILE starts at
(4004)<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">(400C)<span style="mso-spacerun: yes">� </span>DI<span style="mso-spacerun: yes">���������� </span>;these bytes are loaded into DFILE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>JP 409F<span style="mso-spacerun: yes">����� </span>;to vector to the hires routine<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">409F<span style="mso-spacerun: yes">��� </span>LD B,08<span style="mso-spacerun: yes">����� </span>;delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40A1<span style="mso-spacerun: yes">��� </span>DJNZ 40A1<span style="mso-spacerun: yes">��� </span>;delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>LD A,R<span style="mso-spacerun: yes">������ </span>;delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>LD B,C0<span style="mso-spacerun: yes">����� </span>;192 lines<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>LD DE,20<span style="mso-spacerun: yes">���� </span>;32 bytes per line<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>LD HL,(4004) ;hires file (HFILE) starts at RAMTOP<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40AD<span style="mso-spacerun: yes">��� </span>LD A,H<span style="mso-spacerun: yes">������ </span>;MSB address of HFILE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>LD I,A<span style="mso-spacerun: yes">������ </span>;load MSB of HFILE pointer<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>LD A,L<span style="mso-spacerun: yes">������ </span>;LSB address of HFILE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40B3<span style="mso-spacerun: yes">��� </span>JP C0B6<span style="mso-spacerun: yes">����� </span>;JUMP above 32K<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40B6<span style="mso-spacerun: yes">��� </span>LD R,A<span style="mso-spacerun: yes">������ </span>;load LSB of HFILE pointer<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40B8<span style="mso-spacerun: yes">��� </span>"COPYRIGHT 1984 ENNO BORGESTEEDE " ; same as 32 NOPs<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40D8<span style="mso-spacerun: yes">��� </span>JP 40DB<span style="mso-spacerun: yes">����� </span>;JUMP below 32K<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40DB<span style="mso-spacerun: yes">��� </span>ADD HL,DE<span style="mso-spacerun: yes">��� </span>;next hires line<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40DC<span style="mso-spacerun: yes">��� </span>DJNZ 40AD<span style="mso-spacerun: yes">��� </span>;next line repeats 192 times<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40DE<span style="mso-spacerun: yes">��� </span>LD A,1E<span style="mso-spacerun: yes">����� </span>;restore ROM pattern table pointer<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40E0<span style="mso-spacerun: yes">��� </span>LD I,A<span style="mso-spacerun: yes">������ </span>;load pointer<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40E2<span style="mso-spacerun: yes">��� </span>RET<span style="mso-spacerun: yes">��������� </span>;join the SINCLAIR video in progress<o:p></o:p></span></pre>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Courier">HRG7 -
in progress<o:p></o:p></span></p>

<h3 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:14.0pt">WRX16K - 1996 wilf rigter
(wrigter@dccnet.com)<o:p></o:p></span></h3>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
original WRX was written in 1984 but recent renewed interest has yielded newer
more efficient versions. WRX16K 1996 is the most compact version of the WRX yet
and will display a true bit mapped 256x192 hires screen. It was designed to
work with the modified 16K RAMPACK or 16K SRAM and you must first lower RAMTOP
with POKE 16389,96 then NEW before loading.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">The
hires mode can be started and stopped with the same routines shown in the WRX16
listing above. The simple START is used for starting the hires mode by changing
video vector address in the IX register.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">Hires is
stopped with the inline code segment called "BREAK" which returns
synchronously to the Sinclair video mode when the space key is pressed. The
HFILE is a 6K linear array starting at (4004) but is easily relocated. Note
that HFILE must start on a 32 byte boundary (2000,2020, etc).<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">ORG<span style="mso-spacerun: yes">�������������� </span>;16516 (hex 4084)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">START LD IX,HR<span style="mso-spacerun: yes">��� </span>;simple start of the hres mode<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>RET<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">LBUF LD R,A<span style="mso-spacerun: yes">����� </span>;load HFILE address LSB<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>0 0 0 0<span style="mso-spacerun: yes">���� </span>;32 NOPs = 256 pixels<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>0 0 0 0 <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������</span>0 0 0 0 <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������</span>0 0 0 0 <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������</span>0 0 0 0 <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������</span>0 0 0 0 <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������</span>0 0 0 0<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>0 0 0 0<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>RET NZ<span style="mso-spacerun: yes">����� </span>;always returns<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR<span style="mso-spacerun: yes">��� </span><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������</span>LD B,7<span style="mso-spacerun: yes">����� </span>;delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR0<span style="mso-spacerun: yes">�� </span>DJNZ HR0<span style="mso-spacerun: yes">��� </span>;delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>DEC B<span style="mso-spacerun: yes">������ </span>;reset Z flag<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD HL,(4004);HFILE starts at RAMTOP or HSCRN (note below)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD DE,20<span style="mso-spacerun: yes">��� </span>;32 bytes per line<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD B,C0<span style="mso-spacerun: yes">���� </span>;192 lines per hires screen<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR1<span style="mso-spacerun: yes">�� </span>LD A,H<span style="mso-spacerun: yes">�� </span><span style="mso-spacerun: yes">���</span>;get HFILE address MSB<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD I,A<span style="mso-spacerun: yes">����� </span>;load MSB into I register<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD A,L<span style="mso-spacerun: yes">����� </span>;get HFILE address LSB<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>CALL C089<span style="mso-spacerun: yes">�� </span>;CALL LBUF + 8000<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>ADD HL,DE<span style="mso-spacerun: yes">�� </span>;next line<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>DEC B<span style="mso-spacerun: yes">������ </span>;dec line counter<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JP NZ HR1<span style="mso-spacerun: yes">�� </span>;last line<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR2<span style="mso-spacerun: yes">�� </span><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������</span>CALL 292<span style="mso-spacerun: yes">��� </span>;return to application program<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>CALL 220<span style="mso-spacerun: yes">��� </span>;extra register PUSH and VSYNC<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">BREAK<span style="mso-spacerun: yes">������������ </span>;this code segment is optional<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>CALL F46<span style="mso-spacerun: yes">��� </span>;check break key<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD A,1E<span style="mso-spacerun: yes">���� </span>;restore pattern table pointer<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD I,A<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JR NC STOP<span style="mso-spacerun: yes">� </span>;skip the HR vector load if BREAK<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD IX,HR<span style="mso-spacerun: yes">��� </span>;load the HR vector<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">STOP<span style="mso-spacerun: yes">� </span>JP 2A4<span style="mso-spacerun: yes">����� </span>;return to application program<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HSCRN 2000<span style="mso-spacerun: yes">������� </span>;this is used with SRAM at 8K - 16K<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">Note:<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HFILE can be relocated to use SRAM between 8 to 16K by changing<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">LD HL,(4004) to LD HL,(HSCRN).<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">------------------ end of listing ------------------<o:p></o:p></span></pre>

<h3 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:14.0pt">WRX1K - 1996 wilf rigter<o:p></o:p></span></h3>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">This
little true hires program is special because it runs on a 1K/2K ZX81. It
creates a miniature 64x48 high resolution display in a 384 byte array starting
at (RAMTOP), which can be poked directly from BASIC programs. When START is
called, it collapses the SINCLAIR DFILE and expands the hires file above RAMTOP
in order to efficiently utilize the 1K memory. When STOP is called, it recovers
the space above RAMTOP to make more RAM available for DFILE.<o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">��� </span><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������</span>;ORIGIN = 16516 (hex 4084)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">LBUF<span style="mso-spacerun: yes">� </span>;Dummy display file<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;------------------<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;like DFILE, it is called above 32K to activate the ULA video<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;hardware but only bit 7 character code data is used. The hires<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;data is loaded into the ULA video shift register during the refresh<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;cycles of the 8 NOP opcodes when the I and R registers<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;sequentially address 8 bytes of hires data in the 384 byte HFILE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;NOTE: in this special case of short (8 byte) video lines the delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;opcodes (E3 and 40) have bit 6 high to suppress the video display<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;at the start and end of each horizontal line<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>E3 E3 E3 E3;Delay 76T states<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD R,A<span style="mso-spacerun: yes">���� </span>;Now load R register<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">LBYTE 00 00 00 00;8 bytes of 8 pixels<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>00 00 00 00;<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>40 40 40 40;Delay 20T states<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>40<span style="mso-spacerun: yes">�������� </span>;Delay 4T<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JP (IX)<span style="mso-spacerun: yes">��� </span>;Return to HR<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">START ;Makes room above RAMTOP and starts the hires routine<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;----------------------------------------------------<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD IX,HR<span style="mso-spacerun: yes">��� </span>;This is the start of the new video routine<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD BC,180<span style="mso-spacerun: yes">�� </span>;384 bytes are required for a 64X48 display<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>CALL EC5 <span style="mso-spacerun: yes">���</span>;is there enough room to lower ramtop?<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD HL,(4004);get the old RAMTOP (1K/2K)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>CCF<span style="mso-spacerun: yes">�������� </span>;calculate the new RAMTOP value by<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>SBC HL,BC<span style="mso-spacerun: yes">�� </span>;Subtracting the HFILE length<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">STACK ;used by START and STOP to change RAMTOP without NEW<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>OUT FD,A<span style="mso-spacerun: yes">��� </span>;Turn off the NMI generator during STACK move<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD (4004),HL;Save RAMTOP value in the sytem variable<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>DEC HL<span style="mso-spacerun: yes">����� </span>;point to the first byte below RAMTOP<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD (HL),3E<span style="mso-spacerun: yes">� </span>;and mark it with 3E<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>DEC HL<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD SP,HL<span style="mso-spacerun: yes">��� </span>;Load the STACK POINTER<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>DEC HL<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>DEC HL<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD (4002),HL;Load the ERROR STACK POINTER<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>OUT FE,A<span style="mso-spacerun: yes">��� </span>;Turn on NMI<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JP 676<span style="mso-spacerun: yes">����� </span>;resume BASIC program execution at NEXT LINE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR<span style="mso-spacerun: yes">��� </span>;PART 1 calls LBUF 48 times, displaying 64x48 pixels, calculates blank<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;lines, saves pointer to PART 2 in IX, and returns to application code<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;PART 2 calls VSYNC etc, checks the BREAK key, calculates blank lines,<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>;saves pointer to PART 1 in IX and returns to application code.<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD B,04<span style="mso-spacerun: yes">��� </span>;load delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR0<span style="mso-spacerun: yes">�� </span>DJNZ HR0<span style="mso-spacerun: yes">�� </span>;delay 56T states to synchronize with HSYNC pulses.<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD HL,(4004);RAMTOP points to the first HFILE byte<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD B,30<span style="mso-spacerun: yes">��� </span>;48 horizontal lines<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD IX,HR1<span style="mso-spacerun: yes">� </span>;save the return vector in IX (for JP (IX) at end of LBUF)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JR HR2<span style="mso-spacerun: yes">��� </span><span style="mso-spacerun: yes">�</span>;skip HR1 first time through the loop<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR1<span style="mso-spacerun: yes">�� </span>LD DE,08<span style="mso-spacerun: yes">�� </span>;this value for 8 bytes or 64 pixels per line is<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>ADD HL,DE<span style="mso-spacerun: yes">� </span>;added to HL to point to the start of the next HLINE<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>DEC B<span style="mso-spacerun: yes">����� </span>;repeat 48 times<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JP Z HR3<span style="mso-spacerun: yes">�� </span>;if this is the last line JP to HR3<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR2<span style="mso-spacerun: yes">�� </span>LD A,H<span style="mso-spacerun: yes">���� </span>;the address in HL is then transferred to<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD I,A<span style="mso-spacerun: yes">���� </span>;I register<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD A,L<span style="mso-spacerun: yes">���� </span>;and during LBUF to the R register<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JP C084<span style="mso-spacerun: yes">��� </span>;jump to LBUF (4084 + 8000) to start the video<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR3<span style="mso-spacerun: yes">�� </span>LD IX,HR4 <span style="mso-spacerun: yes">�</span>;save the video vector so that NMI returns to PART 2<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JR HR5<span style="mso-spacerun: yes">���� </span>;now get blank lines and return to application code<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR4<span style="mso-spacerun: yes">�� </span>;PART 2<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>CALL 220<span style="mso-spacerun: yes">�� </span>;first PUSH registers then jump to VSYNC, etc<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>CALL F46<span style="mso-spacerun: yes">�� </span>;test the BREAK key<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JR NC STOP ;and exit HR if key is down<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD IX,HR<span style="mso-spacerun: yes">�� </span>;save the video vector so that NMI returns to PART 1<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">HR5<span style="mso-spacerun: yes">�� </span>LD A,(4028);33 or 19 blank lines in system variable MARGIN<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>ADD A,47<span style="mso-spacerun: yes">�� </span>;71 more blank lines for fast application code execution<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JP 29E<span style="mso-spacerun: yes">���� </span>;save blank lines, start NMI, POP registers and RETURN<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">STOP<span style="mso-spacerun: yes">������������ </span>;EXIT hires video to restore RAMTOP and SINCLAIR video<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD A,1E<span style="mso-spacerun: yes">��� </span>;SINCLAIR ROM pattern table MSB base address (1E00)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD I,A<span style="mso-spacerun: yes">���� </span>;pointer to I register<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD HL,(4004);load the current RAMTOP<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD DE,180<span style="mso-spacerun: yes">� </span>;HFILE length<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>ADD HL,DE<span style="mso-spacerun: yes">� </span>;is added to the current RAMTOP<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>LD IX,0281 ;SINCLAIR video routine<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">����� </span>JR STACK<span style="mso-spacerun: yes">�� </span>;exit HR via STACK to change RAMTOP<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">���� </span>;------------------END OF LISTING----------------<o:p></o:p></span></pre>

<h2 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:18.0pt">15. PSEUDO HIRES CORE
ROUTINES<o:p></o:p></span></h2>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">Pseudo
hires software uses CHR$ code + register I to address 1 of 64 pattern bytes in
the ROM. The CHR$ codes are limited 0 to 63 and their inverse (128 to 191) and
the value of I is choses to point to a block of pattern bytes in ROM which has
the greatest randomness and least duplication of values. This method is called
"pseudo" hires because fewer than 50% of the 256 patterns required
for true hires are available for display. This results in incomplete or missing
pixel patterns but for many application (games etc) this is not a problem. The
advantage of this method is the fact that it runs on systems the standard 16K
RAMPACK and is emulated by Xtender. It has a characteristic 6336 byte DFILE
consisting of 192 RET opcodes spaced at 33 byte intervals.<o:p></o:p></span></p>

<h3 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:14.0pt">ROCK CRUSH by Steve McDonald<o:p></o:p></span></h3>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">In
progress<o:p></o:p></span></p>

<h3 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:14.0pt">3DHIRES author unknown<o:p></o:p></span></h3>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">In this
example core routine the expanded hires "DFILE" starts at 6700 hex<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">START<span style="mso-spacerun: yes">�� </span>LD A,04<span style="mso-spacerun: yes">�� </span>; select an "interesting" pattern table<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>LD I,A<span style="mso-spacerun: yes">��� </span>; load into ROM pattern table pointer<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>LD IX,42C4; load pseudo hires vector<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>RET<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">42C4<span style="mso-spacerun: yes">��� </span>LD HL,E6DF; HL is used as the hires "DFILE" pointer<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>LD DE,0021; 32 CHR$ + RET = 33 bytes per line<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>DI<span style="mso-spacerun: yes">������� </span>; INT not used<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>LD C,FE<span style="mso-spacerun: yes">�� </span>; IO address to reset the ULA row counter<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>LD B,16<span style="mso-spacerun: yes">�� </span>; delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">42CF<span style="mso-spacerun: yes">��� </span>DJNZ 42CF ; delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>LD B,C0<span style="mso-spacerun: yes">�� </span>; 192 lines of 33 bytes<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">42D3<span style="mso-spacerun: yes">��� </span>IN A,(C)<span style="mso-spacerun: yes">� </span>; apply reset to row counter<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>OUT FF,A<span style="mso-spacerun: yes">� </span>; release reset from row counter<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>ADD HL,DE ; next "DFILE" line (E700,E721, etc)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>CALL 42EC ; "execute" the "DFILE" via JP (HL) at 42EC<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>DEC B<span style="mso-spacerun: yes">���� </span>; decrement line counter<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>JP NZ 42D3; last line? repeat 192 times.<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>CALL 0292 ; restore main registers, return to application<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>CALL 0220 ; extra register PUSH then VSYNC<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>LD IX,42C4; hires routine vector<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>JP 02A4<span style="mso-spacerun: yes">�� </span>; restore main registers, return to application<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><span style="mso-spacerun: yes">������� </span>JP (HL)<span style="mso-spacerun: yes">�� </span>; jump to the hires "DFILE" echo above 32K<o:p></o:p></span></pre>

<h3 style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:14.0pt">XTRICATOR by Software Farm<o:p></o:p></span></h3>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana">This
unusual pseudo hires core routine intercepts the video by setting INT mode 2 in
which the interrupting device supplies part of the INT vector address. Since
the idle data bus is FF and the I register is set to 40, the INT vector is 4000
when the A6 line interrupts at the end of the horizontal line.<o:p></o:p></span></p>

<p style="tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Verdana"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></p>

<pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">4083<span style="mso-spacerun: yes">��� </span>LD HL,40A5 ;return vector<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">4086<span style="mso-spacerun: yes">��� </span>PUSH HL<span style="mso-spacerun: yes">��� </span>;save vector<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">4087<span style="mso-spacerun: yes">��� </span>LD HL,E500 ;hires file<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">408A<span style="mso-spacerun: yes">��� </span>PUSH HL<span style="mso-spacerun: yes">��� </span>;save vector<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">408B<span style="mso-spacerun: yes">��� </span>LD B,07<span style="mso-spacerun: yes">��� </span>;delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">408D<span style="mso-spacerun: yes">��� </span>DJNZ 408D<span style="mso-spacerun: yes">� </span>;delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">408F<span style="mso-spacerun: yes">��� </span>LD A,1E<span style="mso-spacerun: yes">��� </span>;Sinclair ROM patterns<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">4091<span style="mso-spacerun: yes">� </span><span style="mso-spacerun: yes">��</span>LD I,A<span style="mso-spacerun: yes">���� </span>;load pattern table pointer<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">4093<span style="mso-spacerun: yes">��� </span>LD DE,C201 ;D = 194 lines<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">4096<span style="mso-spacerun: yes">��� </span>DEC E<span style="mso-spacerun: yes">����� </span>;set Z FLAG<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">4097<span style="mso-spacerun: yes">��� </span>JP Z 409A<span style="mso-spacerun: yes">� </span>;delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">409A<span style="mso-spacerun: yes">��� </span>POP HL<span style="mso-spacerun: yes">���� </span>;HL = E500<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">409B<span style="mso-spacerun: yes">��� </span>DEC D<span style="mso-spacerun: yes">����� </span>;decrement the line counter<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">409C<span style="mso-spacerun: yes">��� </span>RET Z<span style="mso-spacerun: yes">����� </span>;after last line only : return to 40A5<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">409D<span style="mso-spacerun: yes">��� </span>SET 0,E<span style="mso-spacerun: yes">��� </span>;E = 01<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">409F<span style="mso-spacerun: yes">��� </span>JP 40A2<span style="mso-spacerun: yes">��� </span>;delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40A2<span style="mso-spacerun: yes">��� </span>LD A,00<span style="mso-spacerun: yes">��� </span>;delay<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40A4<span style="mso-spacerun: yes">��� </span>JP (HL)<span style="mso-spacerun: yes">��� </span>;jump to 6500 above 32K<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40A5<span style="mso-spacerun: yes">��� </span>LD A,04<span style="mso-spacerun: yes">��� </span>;"special" ROM pattern<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40A7<span style="mso-spacerun: yes">��� </span>LD I,A<span style="mso-spacerun: yes">���� </span>;load pattern table pointer<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40A9<span style="mso-spacerun: yes">��� </span>RET<span style="mso-spacerun: yes">������� </span>;return to xxxx<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40AA<span style="mso-spacerun: yes">��� </span>LD A,40<span style="mso-spacerun: yes">��� </span>;INT mode 2 MSB address<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40AC<span style="mso-spacerun: yes">��� </span>LD I,A<span style="mso-spacerun: yes">���� </span>;load the INT mode 2 vector<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40AE<span style="mso-spacerun: yes">��� </span>IM2<span style="mso-spacerun: yes">������� </span>;start INT mode 2<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40B0<span style="mso-spacerun: yes">��� </span>RET<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40B1<span style="mso-spacerun: yes">��� </span>LD A,1E<span style="mso-spacerun: yes">��� </span>;Sinclair ROM patterns<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40B3<span style="mso-spacerun: yes">��� </span>LD I,A<span style="mso-spacerun: yes">���� </span>;load pattern table pointer<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40B5<span style="mso-spacerun: yes">��� </span>IM1<span style="mso-spacerun: yes">������� </span>;restore INT mode 1<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40B7<span style="mso-spacerun: yes">��� </span>RET<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier"><!--[if !supportEmptyParas]-->&nbsp;<!--[endif]--><o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40B8<span style="mso-spacerun: yes">��� </span>LD HL,6500 ;load a call instruction<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40BB<span style="mso-spacerun: yes">��� </span>LD B,C1<span style="mso-spacerun: yes">��� </span>;the start of HFILE (E500)<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">408D<span style="mso-spacerun: yes">��� </span>LD (HL),CD ;CALL 4096<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">408F<span style="mso-spacerun: yes">��� </span>INC HL<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40C0<span style="mso-spacerun: yes">��� </span>LD (HL),96<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40C2<span style="mso-spacerun: yes">��� </span>INC HL<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40C3<span style="mso-spacerun: yes">��� </span>LD (HL),40<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40C5<span style="mso-spacerun: yes">��� </span>INC HL<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40C6<span style="mso-spacerun: yes">��� </span>LD A,20<span style="mso-spacerun: yes">���� </span>;generate a 6144 spaces starting <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40C8<span style="mso-spacerun: yes">��� </span>LD (HL),00<span style="mso-spacerun: yes">� </span>;at 6503<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40CA<span style="mso-spacerun: yes">��� </span>INC HL<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40CB<span style="mso-spacerun: yes">��� </span>DEC A<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40CC<span style="mso-spacerun: yes">��� </span>JR NZ 40C8<o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40CE<span style="mso-spacerun: yes">��� </span>DJNZ 40C6 <o:p></o:p></span></pre><pre style="margin:0in;margin-bottom:.0001pt"><span style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Courier">40D0<span style="mso-spacerun: yes">��� </span>RET<o:p></o:p></span></pre>

<div class="MsoNormal" align="center" style="text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt"><!--[if gte vml 1]><v:shape
 id="_x0000_i1028" type="#_x0000_t75" style='width:6in;height:7.2pt' o:hrpct="0"
 o:hralign="center" o:hr="t">
 <v:imagedata src="./ZX%20Video%20Tutorial_files/image004.gif" o:title="sumhorsa"/>
</v:shape><![endif]--><!--[if !vml]--><img height="10" width="576" src="./ZX%20Video%20Tutorial_files/image004.gif" alt="---" v:shapes="_x0000_i1028"><!--[endif]--></div>

</div>




</body></html>